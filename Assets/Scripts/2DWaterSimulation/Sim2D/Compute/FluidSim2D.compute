#pragma kernel ExternalForces
#pragma kernel UpdateSpatialHash
#pragma kernel Reorder
#pragma kernel ReorderCopyback
#pragma kernel CalculateDensities
#pragma kernel CalculatePressureForce
#pragma kernel CalculateViscosity
#pragma kernel UpdatePositions

// Includes
#include "./FluidMaths2D.hlsl"
#include "./SpatialHash.hlsl"


static const int NumThreads = 64;

// Buffers
RWStructuredBuffer<float2> Positions;
RWStructuredBuffer<float2> PredictedPositions;
RWStructuredBuffer<float2> Velocities;
RWStructuredBuffer<float2> Densities; // Density, Near Density

// Spatial hashing
RWStructuredBuffer<uint> SpatialKeys;
RWStructuredBuffer<uint> SpatialOffsets;
StructuredBuffer<uint> SortedIndices;

// Settings
const uint numParticles;
const float gravity;
const float deltaTime;
const float collisionDamping;
const float smoothingRadius;
const float targetDensity;
const float pressureMultiplier;
const float nearPressureMultiplier;
const float viscosityStrength;
const float2 boundsSize;
const float2 boundsCentre;
const float2 interactionInputPoint;
const float interactionInputStrength;
const float interactionInputRadius;

const float2 obstacleSize;
const float2 obstacleCentre;

struct SceneCollider
{
    float2 position;
    float2 size;
    float rotation;
    int colliderType;
};
StructuredBuffer<SceneCollider> SceneColliders;
uint numSceneColliders;
float colliderRepulsionStrength;
float colliderRepulsionRadius;

float DensityKernel(float dst, float radius)
{
	return SpikyKernelPow2(dst, radius);
}

float NearDensityKernel(float dst, float radius)
{
	return SpikyKernelPow3(dst, radius);
}

float DensityDerivative(float dst, float radius)
{
	return DerivativeSpikyPow2(dst, radius);
}

float NearDensityDerivative(float dst, float radius)
{
	return DerivativeSpikyPow3(dst, radius);
}

float ViscosityKernel(float dst, float radius)
{
	return SmoothingKernelPoly6(dst, smoothingRadius);
}

float2 CalculateDensity(float2 pos)
{
	int2 originCell = GetCell2D(pos, smoothingRadius);
	float sqrRadius = smoothingRadius * smoothingRadius;
	float density = 0;
	float nearDensity = 0;

	// Neighbour search
	for (int i = 0; i < 9; i++)
	{
		uint hash = HashCell2D(originCell + offsets2D[i]);
		uint key = KeyFromHash(hash, numParticles);
		uint currIndex = SpatialOffsets[key];

		while (currIndex < numParticles)
		{
			uint neighbourIndex = currIndex;
			currIndex ++;
			
			uint neighbourKey = SpatialKeys[neighbourIndex];
			// Exit if no longer looking at correct bin
			if (neighbourKey != key) break;

			float2 neighbourPos = PredictedPositions[neighbourIndex];
			float2 offsetToNeighbour = neighbourPos - pos;
			float sqrDstToNeighbour = dot(offsetToNeighbour, offsetToNeighbour);

			// Skip if not within radius
			if (sqrDstToNeighbour > sqrRadius) continue;

			// Calculate density and near density
			float dst = sqrt(sqrDstToNeighbour);
			density += DensityKernel(dst, smoothingRadius);
			nearDensity += NearDensityKernel(dst, smoothingRadius);
		}
	}

	return float2(density, nearDensity);
}

float PressureFromDensity(float density)
{
	return (density - targetDensity) * pressureMultiplier;
}

float NearPressureFromDensity(float nearDensity)
{
	return nearPressureMultiplier * nearDensity;
}

float2 ExternalForces(float2 pos, float2 velocity)
{
	// Gravity
	float2 gravityAccel = float2(0, gravity);
	
	// Input interactions modify gravity
	if (interactionInputStrength != 0) {
		float2 inputPointOffset = interactionInputPoint - pos;
		float sqrDst = dot(inputPointOffset, inputPointOffset);
		if (sqrDst < interactionInputRadius * interactionInputRadius)
		{
			float dst = sqrt(sqrDst);
			float edgeT = (dst / interactionInputRadius);
			float centreT = 1 - edgeT;
			float2 dirToCentre = inputPointOffset / dst;

			float gravityWeight = 1 - (centreT * saturate(interactionInputStrength / 10));
			float2 accel = gravityAccel * gravityWeight + dirToCentre * centreT * interactionInputStrength;
			accel -= velocity * centreT;
			return accel;
		}
	}

	return gravityAccel;
}

void HandleSceneCollision(inout float2 pos, inout float2 vel, float2 originalVel, float originalSpeed)
{
    for (uint i = 0; i < numSceneColliders; i++)
    {
        SceneCollider col = SceneColliders[i];
        float2 relPos = pos - col.position;
        
        if (col.colliderType == 0) // Box collider
        {
            
            float cosA = cos(col.rotation);
            float sinA = sin(col.rotation);
            float2 rotPos = float2(
                relPos.x * cosA + relPos.y * sinA,
                -relPos.x * sinA + relPos.y * cosA
            );
            
            float2 halfSize = col.size * 0.5;
            float2 edgeDst = halfSize - abs(rotPos);
            
            if (edgeDst.x >= 0 && edgeDst.y >= 0)
            {
                
                if (edgeDst.x < edgeDst.y)
                {
                    
                    float2 normal = float2(sign(rotPos.x) * cosA, sign(rotPos.x) * sinA);
                    float impactAngle = acos(abs(dot(normalize(originalVel), normal)));
                    float angleFactor = 1.0 - saturate(impactAngle / 1.57);
                    
                    
                    pos = col.position + normal * (halfSize.x + 0.01);
                    vel -= 2 * dot(vel, normal) * normal * collisionDamping * lerp(1.0, 0.8, angleFactor);
                }
                else
                {
                    float2 normal = float2(-sign(rotPos.y) * sinA, sign(rotPos.y) * cosA);
                    float impactAngle = acos(abs(dot(normalize(originalVel), normal)));
                    float angleFactor = 1.0 - saturate(impactAngle / 1.57);
                    
                    pos = col.position + normal * (halfSize.y + 0.01);
                    vel -= 2 * dot(vel, normal) * normal * collisionDamping * lerp(1.0, 0.8, angleFactor);
                }
            }
        }
        else // Circle collider
        {
            float dist = length(relPos);
            if (dist < col.size.x * 0.5)
            {
                float2 normal = normalize(relPos);
                float impactAngle = acos(abs(dot(normalize(originalVel), normal)));
                float angleFactor = 1.0 - saturate(impactAngle / 1.57);
                
                pos = col.position + normal * (col.size.x * 0.5 + 0.01);
                vel -= 2 * dot(vel, normal) * normal * collisionDamping * lerp(1.0, 0.8, angleFactor);
            }
        }
    }
}


void HandleCollisions(uint particleIndex)
{
    float2 pos = Positions[particleIndex];
    float2 vel = Velocities[particleIndex];
    float2 originalVel = vel;
    float originalSpeed = length(originalVel);

	// Keep particle inside bounds
    const float2 halfSize = boundsSize * 0.5;
    float2 relPos = pos - boundsCentre;
    float2 edgeDst = halfSize - abs(relPos);

    if (edgeDst.x <= 0)
    {
        pos.x = boundsCentre.x + halfSize.x * sign(relPos.x);
        vel.x *= -1 * collisionDamping;
    }
    if (edgeDst.y <= 0)
    {
        pos.y = boundsCentre.y + halfSize.y * sign(relPos.y);
        vel.y *= -1 * collisionDamping;
    }

	// Collide particle against the test obstacle
    const float2 obstacleHalfSize = obstacleSize * 0.5;
    float2 obstacleEdgeDst = obstacleHalfSize - abs(pos - obstacleCentre);

    if (obstacleEdgeDst.x >= 0 && obstacleEdgeDst.y >= 0)
    {
        if (obstacleEdgeDst.x < obstacleEdgeDst.y)
        {
            pos.x = obstacleHalfSize.x * sign(pos.x - obstacleCentre.x) + obstacleCentre.x;
            vel.x *= -1 * collisionDamping;
        }
        else
        {
            pos.y = obstacleHalfSize.y * sign(pos.y - obstacleCentre.y) + obstacleCentre.y;
            vel.y *= -1 * collisionDamping;
        }
    }

    HandleSceneCollision(pos, vel, originalVel, originalSpeed);
	// Update position and velocity
    Positions[particleIndex] = pos;
    Velocities[particleIndex] = vel;
}

[numthreads(NumThreads,1,1)]
void ExternalForces(uint3 id : SV_DispatchThreadID)
{
	if (id.x >= numParticles) return;

	// External forces (gravity and input interaction)
	Velocities[id.x] += ExternalForces(Positions[id.x], Velocities[id.x]) * deltaTime;

	// Predict
	const float predictionFactor = 1 / 120.0;
	PredictedPositions[id.x] = Positions[id.x] + Velocities[id.x] * predictionFactor;
}

[numthreads(NumThreads,1,1)]
void UpdateSpatialHash (uint3 id : SV_DispatchThreadID)
{
	if (id.x >= numParticles) return;
	
	uint index = id.x;
	int2 cell = GetCell2D(PredictedPositions[index], smoothingRadius);
	uint hash = HashCell2D(cell);
	uint key = KeyFromHash(hash, numParticles);
	SpatialKeys[id.x] = key;
}

RWStructuredBuffer<float2> SortTarget_Positions;
RWStructuredBuffer<float2> SortTarget_PredictedPositions;
RWStructuredBuffer<float2> SortTarget_Velocities;

[numthreads(NumThreads,1,1)]
void Reorder (uint3 id : SV_DispatchThreadID)
{
	if (id.x >= numParticles) return;

	uint sortedIndex = SortedIndices[id.x];
	SortTarget_Positions[id.x] = Positions[sortedIndex];
	SortTarget_PredictedPositions[id.x] = PredictedPositions[sortedIndex];
	SortTarget_Velocities[id.x] = Velocities[sortedIndex];
}


[numthreads(NumThreads,1,1)]
void ReorderCopyback (uint3 id : SV_DispatchThreadID)
{
	if (id.x >= numParticles) return;
	
	Positions[id.x] = SortTarget_Positions[id.x];
	PredictedPositions[id.x] = SortTarget_PredictedPositions[id.x];
	Velocities[id.x] = SortTarget_Velocities[id.x];
}


[numthreads(NumThreads,1,1)]
void CalculateDensities (uint3 id : SV_DispatchThreadID)
{
	if (id.x >= numParticles) return;

	float2 pos = PredictedPositions[id.x];
	Densities[id.x] = CalculateDensity(pos);
}


float2 CalculateColliderRepulsionForce(float2 pos, float strength, float effectRadius)
{
    float2 force = float2(0, 0);
    const float minDst = 0.01;
    if (numSceneColliders == 0)
    {
        return force;
    }
    
    for (uint i = 0; i < numSceneColliders; i++)
    {
        SceneCollider col = SceneColliders[i];
        float2 relPos = pos - col.position;
        
        if (col.colliderType == 0)
        {
            
            float cosA = cos(col.rotation);
            float sinA = sin(col.rotation);
            float2 rotPos = float2(
                relPos.x * cosA + relPos.y * sinA,
                -relPos.x * sinA + relPos.y * cosA
            );
            
            float2 halfSize = col.size * 0.5;
            float2 closestPoint = float2(
                clamp(rotPos.x, -halfSize.x, halfSize.x),
                clamp(rotPos.y, -halfSize.y, halfSize.y)
            );
            
            float2 localDir = rotPos - closestPoint;
            float dstToSurface = length(localDir);
    
            if (dstToSurface < effectRadius && dstToSurface > minDst)
            {
                float2 worldDir = float2(
					localDir.x * cosA - localDir.y * sinA,
					localDir.x * sinA + localDir.y * cosA
				);
                worldDir = normalize(worldDir);
        
                float angleFactor = 1.0 + 0.5 * abs(sin(2.0 * col.rotation)); 
                float t = 1.0 - smoothstep(0.0, effectRadius, dstToSurface);
                force += worldDir * strength * t * t * angleFactor * 30.0;
            }
        }
        else
        {
            float radius = col.size.x * 0.5;
            float dist = length(relPos);
            float dstToSurface = dist - radius;
            
            if (dstToSurface < effectRadius && dstToSurface > minDst)
            {
                float2 dirToSurface = normalize(relPos);
                float t = 1.0 - smoothstep(0.0, effectRadius, dstToSurface);
                force += dirToSurface * strength * t * t * 20.0;
            }
        }
    }
    
    return force;
}



[numthreads(NumThreads,1,1)]
void CalculatePressureForce (uint3 id : SV_DispatchThreadID)
{
	if (id.x >= numParticles) return;

	float density = Densities[id.x][0];
	float densityNear = Densities[id.x][1];
	float pressure = PressureFromDensity(density);
	float nearPressure = NearPressureFromDensity(densityNear);
	float2 pressureForce = 0;
	
	float2 pos = PredictedPositions[id.x];	
	int2 originCell = GetCell2D(pos, smoothingRadius);
	float sqrRadius = smoothingRadius * smoothingRadius;

	// Neighbour search
	for (int i = 0; i < 9; i ++)
	{
		uint hash = HashCell2D(originCell + offsets2D[i]);
		uint key = KeyFromHash(hash, numParticles);
		uint currIndex = SpatialOffsets[key];

		while (currIndex < numParticles)
		{
			uint neighbourIndex = currIndex;
			currIndex ++;

			// Skip if looking at self
			if (neighbourIndex == id.x) continue;
			
			uint neighbourKey = SpatialKeys[neighbourIndex];
			// Exit if no longer looking at correct bin
			if (neighbourKey != key) break;
			
			float2 neighbourPos = PredictedPositions[neighbourIndex];
			float2 offsetToNeighbour = neighbourPos - pos;
			float sqrDstToNeighbour = dot(offsetToNeighbour, offsetToNeighbour);

			// Skip if not within radius
			if (sqrDstToNeighbour > sqrRadius) continue;

			// Calculate pressure force
			float dst = sqrt(sqrDstToNeighbour);
			float2 dirToNeighbour = dst > 0 ? offsetToNeighbour / dst : float2(0, 1);

			float neighbourDensity = Densities[neighbourIndex][0];
			float neighbourNearDensity = Densities[neighbourIndex][1];
			float neighbourPressure = PressureFromDensity(neighbourDensity);
			float neighbourNearPressure = NearPressureFromDensity(neighbourNearDensity);

			float sharedPressure = (pressure + neighbourPressure) * 0.5;
			float sharedNearPressure = (nearPressure + neighbourNearPressure) * 0.5;

			pressureForce += dirToNeighbour * DensityDerivative(dst, smoothingRadius) * sharedPressure / neighbourDensity;
			pressureForce += dirToNeighbour * NearDensityDerivative(dst, smoothingRadius) * sharedNearPressure / neighbourNearDensity;
		}
	}

	
	float2 acceleration = pressureForce / density;
	Velocities[id.x] += acceleration * deltaTime;//
}



[numthreads(NumThreads,1,1)]
void CalculateViscosity (uint3 id : SV_DispatchThreadID)
{
	if (id.x >= numParticles) return;
	
		
	float2 pos = PredictedPositions[id.x];
	int2 originCell = GetCell2D(pos, smoothingRadius);
	float sqrRadius = smoothingRadius * smoothingRadius;

	float2 viscosityForce = 0;
	float2 velocity = Velocities[id.x];

	for (int i = 0; i < 9; i ++)
	{
		uint hash = HashCell2D(originCell + offsets2D[i]);
		uint key = KeyFromHash(hash, numParticles);
		uint currIndex = SpatialOffsets[key];

		while (currIndex < numParticles)
		{
			uint neighbourIndex = currIndex;
			currIndex ++;

			// Skip if looking at self
			if (neighbourIndex == id.x) continue;
			
			uint neighbourKey = SpatialKeys[neighbourIndex];
			// Exit if no longer looking at correct bin
			if (neighbourKey != key) break;

			float2 neighbourPos = PredictedPositions[neighbourIndex];
			float2 offsetToNeighbour = neighbourPos - pos;
			float sqrDstToNeighbour = dot(offsetToNeighbour, offsetToNeighbour);

			// Skip if not within radius
			if (sqrDstToNeighbour > sqrRadius) continue;

			float dst = sqrt(sqrDstToNeighbour);
			float2 neighbourVelocity = Velocities[neighbourIndex];
			viscosityForce += (neighbourVelocity - velocity) * ViscosityKernel(dst, smoothingRadius);
		}

	}
	Velocities[id.x] += viscosityForce * viscosityStrength * deltaTime;
}

[numthreads(NumThreads, 1, 1)]
void UpdatePositions(uint3 id : SV_DispatchThreadID)
{
	if (id.x >= numParticles) return;

    if (numSceneColliders > 0)
    {
        float2 repulsionForce = CalculateColliderRepulsionForce(
            Positions[id.x],
            colliderRepulsionStrength,
            smoothingRadius * colliderRepulsionRadius
        );
        Velocities[id.x] += repulsionForce * deltaTime;
    }
	
	Positions[id.x] += Velocities[id.x] * deltaTime;
	
	
	HandleCollisions(id.x);
}